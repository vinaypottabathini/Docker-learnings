Accessing the Container


At this point, we have four containers, but only one is up and actively running.

docker container list -a
To start one of our exited containers, we can use the docker start command. Let's work with our a-container container.

docker container start a-container
From here, if we want to work with our container, we can use the docker exec command. For example, let's add nginx to our container.

docker exec a-container apk add nginx
Alternatively, we can drop directly into our container's shell by pairing the exec command with -it, the same as when we were working with docker run. We'll want to specify the name of the shell as the command (ie. docker exec -it <container> <shell>):

docker exec -it a-container ash
From here, we can run commands as we would normally.

cd /etc/nginx
ls
Log out when finished.

exit
We can also upload files as needed. Let's fill out our a-container web server by updating the default nginx server config. We can do this with docker cp <source> <dest>. The source and destination can be either the localhost or a container. Let's first copy down our default.conf file.

docker cp a-container:/etc/nginx/conf.d/default.conf .
This copies it directly to our current directory under its current name, default.conf.

Open the file and update the contents.

vim default.conf
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        root /var/www/;
}
We can now replace it by pushing it back to the same location.

docker cp default.conf a-container:/etc/nginx/conf.d/default.conf
We can confirm with:

docker exec a-container cat /etc/nginx/conf.d/default.conf
Wrap-Up
docker start <container>: Start a container
-i: Attach to STDOUT
docker exec <container> <command>: Run a command against the container
-it <container> <shell>: Drop into a shell prompt
docker cp <source> <container>:<destination>: Copy a file to the container
<container>:<source> <destination>: Copy from a container to localhost

