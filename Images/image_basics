Image Basics


We wouldn't have been able to complete any of our previous lessons if not for the alpine Docker image, and Docker cannot function without a base image for the container to base itself on. But what is an image? Those familiar with virtual machine images probably already have some idea, and they'd be mostly right save for a few differences to increase reusability, decrease disk space, and ensure the docker build runs quickly. To achieve this, images are comprised of intermediate layers that are then cached. An image should contain everything it needs to complete its intended job, whether that be run an application, microserver, or otherwise. This includes code, runtime, libraries, environmental variables, and configuration files.

We can see the steps taken to build an image by viewing the Dockerfile of an image. This can be found in the image repository itself, which in most cases will be the Docker Hub. Let's look at the hello-world image, found here (https://hub.docker.com/_/hello-world).

Under Shared Tags, click on the latest: linux build. Notice the simple Dockerfile:

FROM scratch
COPY hello /
CMD ["/hello"]
The hello-world image is a base image. This means it's not based on any other image, but instead uses FROM scratch to signify the next command will be the filesystem layer. Images can also be based on other images. For example, the nginx (https://hub.docker.com/_/nginx) image we used in the lab is based on Debian Buster (FROM debian:buster-slim). This is the image's parent image.

The next line copies the hello binary to the root of the filesystem, which can be found here (https://github.com/docker-library/hello-world/blob/master/hello.c). This is the output message we saw when we ran the hello-world container.

The final line runs the binary, outputting the DOCKER_GREETING message. There can only be one CMD line, and it's the command that's run after the container is launched. If not persistent, the container will automatically exit once the command has finished.

Each line works as its own layer and is cached separately, as indicated earlier.

Now, let's get hands-on and create our own Dockerfile in the next lesson.

Wrap-Up
Images are based on a Dockerfile.
Base Image: An image based on the scratch template; the first layer defines the file system.
Parent Image: The image from which the current Docker image is based.
Images are comprised of layers.
Each layer is cached.
Increases reusability.
Decreases disk space.
Ensures speed during deploy.
